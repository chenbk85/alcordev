#ifndef bumblebee_t_H_INCLUDED
#define bumblebee_t_H_INCLUDED
//---------------------------------------------------------------------------
#include "alcor2/sense/i_device_driver.h"
//---------------------------------------------------------------------------
namespace all{ 
	namespace sense {
	///A Point Grey Bumblebee digital camera.
	class bumblebee_t;
	class bumblebee_parameters_t;
	struct left_img {};
	struct right_img{};
	struct depth_img{};
}
	}
//---------------------------------------------------------------------------
///Structure for defining the open() parameters of the camera.
class all::sense::bumblebee_parameters_t
{
public:
	///Constructor. Add here the parameters for the open().
	bumblebee_parameters_t()
	{
		// parameters initialization
		_unit_number = 0;		
		_rows = 480;
		_cols = 640;
	}

	// Parameters
	unsigned int _unit_number;
	unsigned int _rows;
	unsigned int _cols;

    //void load(const std::string &filename);
    //void save(const std::string &filename);
};

//---------------------------------------------------------------------------
class all::sense::bumblebee_t : public i_device_driver
	{
public:
	///Constructor.
	bumblebee_t();

	typedef enum grab_mode{eColor, eStd, eAll} grab_mode;
	typedef enum eye_id   {eLeft, eRight}	   eye_id;

	///Inherited
	bool open();
	///Inherited
	bool close();

	///
	bool initialize(grab_mode gmode=eStd);

	///Grabs Stereo Color Image.
	void grab_color(grab_mode mode=eStd);

	///
	void grab_3d();


public:
	///
	size_t nrows() const;

	///
	size_t ncols() const;


public:
	///
	bool  get_raw_color(core::byte_t*);
	///
	bool  get_raw_depth(float*);
	///
	all::core::spByteArray  get_color_buffer(eye_id what=eRight);
	///
	all::core::spFloatArray get_depth_buffer(eye_id what=eRight);

protected:
	///PIMPL Idiom
	void* pimpl;
	};
//---------------------------------------------------------------------------
#endif //bumblebee_t_H_INCLUDED