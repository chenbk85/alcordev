#include "BumblebeeDeviceDriver.h"
//---------------------------------------------------------------------------
using namespace all;
using namespace all::sense;
//---------------------------------------------------------------------------
//IMPLEMENTATION
//---------------------------------------------------------------------------
//#include "triclops.h"
#include "digiclops.h"
#include "pnmutils.h"
//---------------------------------------------------------------------------
///
class bumblebee_impl
	{
public:
	///
	bumblebee_impl();
  
    float   m_focal;
    float   m_centerRow;
    float   m_centerCol;
    float   m_baseline;
    int     m_serialNum;
	size_t	m_rows;
	size_t	m_cols;

	///
	void _init_context();
	/// 
	void _digiclops_private_init();

	void _grab();

	///Depth map ...
	void _triclops_process();
	///
	void _destroy_context();

public:
	///Error Handling
    void handleDigiclopsError(char*, DigiclopsError);
	///Error Handling
    void handleTriclopsError(char*, TriclopsError);

public:
	///
	TriclopsInput       colorData;
	///
	TriclopsColorImage  colorImage;
	///
	TriclopsColorImage  leftColorImage ;
	///
	TriclopsColorImage  rightColorImage ;

	///
	TriclopsInput       stereoData;
	///
	TriclopsImage16     depthImage16;

	///Triclops Context
	TriclopsContext     triclops;
	///Digiclops Context
	DigiclopsContext    digiclops;

//Settings*			m_settings;
	};
//---------------------------------------------------------------------------
//Helper Func
inline bumblebee_impl& GETPIMPL(void* pimpl_) 
	{ return *(bumblebee_impl*) pimpl_; }
//---------------------------------------------------------------------------
inline void bumblebee_impl::_init_context()
	{
	DigiclopsError      de;
	//printf("Creating Context\n");

   // open the Digiclops
   de = digiclopsCreateContext( &digiclops );
   handleDigiclopsError( "digiclopsCreateContext()", de );
   
   de = digiclopsInitialize( digiclops, 0 );
   handleDigiclopsError( "digiclopsInitialize()", de );

   // get the camera module configuration
   de = digiclopsGetTriclopsContextFromCamera( digiclops, &triclops );
   handleDigiclopsError( "digiclopsGetTriclopsContextFromCamera()", de );
	}
//---------------------------------------------------------------------------
inline void bumblebee_impl::_destroy_context()
	{
	printf("Stopping the camera\n");
	DigiclopsError      de;
	TriclopsError       te; 

	//if(bRunning)
	//	{
	//	stop_grabbing();
	//	}

	de = digiclopsStop(digiclops); 
	handleDigiclopsError( "digiclopsStop()", de );
	   
	de = digiclopsDestroyContext(digiclops );
	handleDigiclopsError( "digiclopsDestroyContext()", de );

  	te = triclopsDestroyContext(triclops);
	handleTriclopsError("triclopsDestroyContext",te);
   
    printf("CAMERA STOPPED\n");
    //bRunning = false;
	}
//---------------------------------------------------------------------------
inline void bumblebee_impl::_grab()
	{
	// grab the image set
	DigiclopsError      de;
	de = digiclopsGrabImage(digiclops );
	handleDigiclopsError( "digiclopsGrabImage()", de );
	}
//---------------------------------------------------------------------------
//EXTERNAL INTERFACE SRC
//---------------------------------------------------------------------------
bumblebee_t::bumblebee_t()
	{
    pimpl = 0;
	pimpl = (void *) new bumblebee_impl;
	//qui ci starebbe bene un assert....
	}
//---------------------------------------------------------------------------
bool bumblebee_t::open()
	{
	bumblebee_impl& impl = GETPIMPL(pimpl);
	//impl._init_context();
	return true;
	}
//---------------------------------------------------------------------------
bool bumblebee_t::close()
	{
	return true;
	}
//---------------------------------------------------------------------------
size_t bumblebee_t::nrows() const
	{
	bumblebee_impl& impl = GETPIMPL(pimpl);
	return impl.m_rows;
	}
//---------------------------------------------------------------------------
size_t bumblebee_t::ncols() const
	{
	bumblebee_impl& impl =  GETPIMPL(pimpl);
	return impl.m_cols;
	}
//---------------------------------------------------------------------------
void bumblebee_t::grab_color(grab_mode mode)
	{
	DigiclopsError de;
	TriclopsError       te;

	bumblebee_impl& impl = GETPIMPL(pimpl);

	impl._grab();

	if (mode==grab_mode::eStd)
	   {
		de = digiclopsExtractTriclopsInput( impl.digiclops, 
											RIGHT_IMAGE, 
											&impl.colorData );

		impl.handleDigiclopsError( "digiclopsExtractTriclopsInput()", de );		

 		te = triclopsRectifyColorImage( 
								impl.triclops, 
								TriCam_REFERENCE, 
								&impl.colorData, &impl.colorImage );

		impl.handleTriclopsError( "triclopsRectifyColorImage()", te );
	   }
   else
	   {

	   }

	}
//---------------------------------------------------------------------------
void bumblebee_t::grab_3d()
	{

	}
//---------------------------------------------------------------------------
all::core::spByteArray  bumblebee_t::get_color_buffer()
	{
	bumblebee_impl& impl  = GETPIMPL(pimpl);

	int planeinc = impl.colorImage.nrows * impl.colorImage.ncols;

	core::spByteArray arr = core::byte_array_t::create(planeinc*3);

	arr->fill(arr->begin(),	&impl.colorImage.red[0], planeinc);
	arr->fill(boost::next(arr->begin(),planeinc), 
					&impl.colorImage.green[0],planeinc);
	arr->fill(boost::next(arr->begin(),(planeinc*2)),
					&impl.colorImage.blue[0], planeinc);

	return arr;
	}
//---------------------------------------------------------------------------
all::core::spFloatArray bumblebee_t::get_depth_buffer()
	{
	bumblebee_impl& impl =  GETPIMPL(pimpl);
	int planeinc = impl.colorImage.nrows*impl.colorImage.ncols;

	core::spFloatArray arr = core::float_array_t::create(planeinc*3);	
	return arr;
	}
//---------------------------------------------------------------------------